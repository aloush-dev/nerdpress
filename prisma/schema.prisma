generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Post {
    id        String   @id @default(uuid())
    userId    String
    title     String
    content   String   @db.LongText()
    slug      String   @unique
    createdAt DateTime @default(now())
    category  String   @default(dbgenerated("\"Uncategorised\""))

    user User @relation(fields: [userId], references: [id])

    @@index([userId])
}

model Category {
    id   String @id @default(uuid())
    name String
}

model Testimonials {
    id        String   @id @default(uuid())
    userId    String
    content   String   @db.Text
    approved  Boolean  @default(false)
    featured  Boolean  @default(false)
    postedBy  String
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id])

    @@index([userId])
}

model Service {
    id              Int    @id @default(autoincrement())
    userId          String
    title           String
    price           Int
    description     String @db.Text
    displayPosition Int    @default(0)

    user User @relation(fields: [userId], references: [id])

    @@index([userId])
}

model Faqs {
    id              Int    @id @default(autoincrement())
    userId          String
    question        String
    answer          String @db.Text
    displayPosition Int    @default(0)

    user User @relation(fields: [userId], references: [id])

    @@index([userId])
}

model Configuration {
    id              Int     @id @default(autoincrement())
    websiteName     String  @default("My Website")
    websiteSubTitle String  @default("My Websites SubTitle")
    theme           String  @default("default")
    instagramLink   String  @default("")
    facebookLink    String  @default("")
    footerLinks     Boolean @default(false)
}

model ColourScheme {
    id    Int    @id @default(autoincrement())
    name  String
    hex   String
    theme String
}

model NavBarLinks {
    id     Int     @id @default(autoincrement())
    name   String
    active Boolean
}

model AboutContent {
    id             Int     @id @default(autoincrement())
    positionOnPage Int
    heading        String?
    subHeading     String?
}

model HomeContent {
    id             Int     @id @default(autoincrement())
    positionOnPage Int
    heading        String?
    subHeading     String?
    Content        String?
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    admin         Boolean   @default(false)
    accounts      Account[]
    sessions      Session[]

    posts        Post[]
    Service      Service[]
    Faqs         Faqs[]
    Testimonials Testimonials[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
